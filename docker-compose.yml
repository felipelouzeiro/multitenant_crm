

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fullstack_postgres
    environment:
      POSTGRES_DB: multitenant_crm
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - fullstack_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fullstack_backend
    environment:
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: multitenant_crm
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres123
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      NODE_ENV: development
      PORT: 3000
    ports:
      - "3001:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - fullstack_network
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run start:dev

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: fullstack_frontend
    env_file:
      - ./frontend/.env
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - fullstack_network

volumes:
  postgres_data:

networks:
  fullstack_network:
    driver: bridge
